struct Ray
{
    vec3 o;
    vec3 d;
};
 
vec3 point(vec3 o, vec3 d, float t)
{
    return o + t*d;
}
    
vec4 opU( vec4 t1, vec4 t2 )
{
    if (t1.w > t2.w && t2.w < 0.0)
        return t1;
    
	return t2;
}

vec4 idSphere(vec3 center, float radius, Ray r, float tmin, float tmax)
{
    vec3 oc = r.o - center;
    float a = dot(r.d, r.d);
    float b = 2.0 * dot(oc, r.d);
    float c = dot(oc, oc) - radius * radius;
    float discriminant = b*b - 4.0*a*c;
    
    float q = -0.5 * (b + sqrt(discriminant));
    
    if (discriminant > 0.0) {
        float temp = q / a;
        if (temp < tmax && temp > tmin ) {
        	return vec4(normalize(vec3(point(r.o, r.d, temp) - center)), temp);
        }
        
        temp = c / q;
        if (temp < tmax && temp > tmin) {
            return vec4(normalize(vec3(point(r.o, r.d, temp) - center)), temp);  
        }
    }
	return vec4(vec3(-1.0,-1.0,1.0), -1.0);
}

vec4 map(Ray r, float tmin, float tmax)
{
    vec4 hit = opU( idSphere(vec3(0.0,-100.5, -1.0), 100.0, r, tmin, tmax),
        			idSphere(vec3(0.0,0.0,-1.0), 0.5, r, tmin, tmax));
    return hit;
}

vec4 castRay(Ray r)
{
    float tmin = 0.0;
    float tmax = 1.0/0.0;
    vec4 hit;
    hit = map(r, tmin, tmax);
	return hit;    
}

vec3 render(Ray r)
{
    vec4 hit = castRay(r);
    float t = hit.w;
    if (t >= 0.0) {
        return 0.5*(hit.xyz + vec3(1.0, 1.0, 1.0));
    }
    vec3 unit_direction = normalize(r.d);
   	t = 0.5 * (unit_direction.y + 1.0);
    return mix(vec3(1.0, 1.0, 1.0), vec3(0.5, 0.7, 1.0), t);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	vec2 uv = fragCoord.xy / iResolution.xy;
      
  	vec3 lower_left_corner = vec3(-2.0, -1.0, -1.0);
  	vec3 horizontal = vec3(4.0, 0.0, 0.0);
  	vec3 vertical = vec3(0.0, 2.25, 0.0);
  	vec3 origin = vec3(0.0, 0.0, 0.0);
    
    vec3 col;
    
    Ray r;
    r.o = origin; 
    r.d = lower_left_corner + uv.x*horizontal + uv.y*vertical;
    
    col = render(r);
	fragColor = vec4(col,1.0);
}