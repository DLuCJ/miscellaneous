struct Ray
{
    vec3 o;
    vec3 d;
};

float intersect(vec3 center, float radius, Ray r)
{
    vec3 oc = r.o - center;
    float a = dot(r.d, r.d);
    float b = 2.0 * dot(oc, r.d);
    float c = dot(oc, oc) - radius * radius;
    float discriminant = b*b - 4.0*a*c;
    
    if (discriminant < 0.0)
        return -1.0;
    else {
        float q = -0.5 * (b + sqrt(discriminant));
    	return q/a;
    }
}

vec3 point(vec3 o, vec3 d, float t)
{
    return o + t*d;
}

vec3 color(Ray r)
{
    float t = intersect(vec3(0,0,-1), 0.5, r);
    if (t >= 0.0) {
        vec3 N = normalize(vec3(point(r.o, r.d, t) - vec3(0,0,-1)));
        return 0.5*(vec3(N) + vec3(1.0, 1.0, 1.0));
    }
    vec3 unit_direction = normalize(r.d);
   	t = 0.5 * (unit_direction.y + 1.0);
    return mix(vec3(1.0, 1.0, 1.0), vec3(0.5, 0.7, 1.0), t);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	vec2 uv = fragCoord.xy / iResolution.xy;
      
  	vec3 lower_left_corner = vec3(-2.0, -1.0, -1.0);
  	vec3 horizontal = vec3(4.0, 0.0, 0.0);
  	vec3 vertical = vec3(0.0, 2.25, 0.0);
  	vec3 origin = vec3(0.0, 0.0, 0.0);
    
    vec3 col;
    
    Ray r;
    r.o = origin; 
    r.d = lower_left_corner + uv.x*horizontal + uv.y*vertical;
    
    col = color(r);
	fragColor = vec4(col,1.0);
}
